@page "/loginOrRegister"
@using System.ComponentModel.DataAnnotations
@using Shop.Types.Common.ReplyTypes
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Login Or Register</PageTitle>

@if (_registered) 
{
    <!-- PENDING 2FA -->
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h1>Registration Success!</h1>
        <i class="fa-solid fa-circle-check fa-4x text-success mb-3"></i>
        <p class="text-secondary mb-0">Your account has been created and is awaiting confirmation. A link has been emailed to your email. Please verify your email before logging in.</p>
        <hr/>
        <!-- LOGIN -->
        <button class="btn btn-full btn-success mb-2" @onclick="GoToLogin"><i class="fa fa-user me-2"></i>Login</button>
    </div>
}
else if (_pendingTwoFactor) 
{
    <!-- PENDING 2FA -->
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h2>Two-factor authentication</h2>
        <i class="fa-solid fa-circle-check fa-4x text-primary mb-3"></i>
        <p class="text-secondary mb-0">Your login is protected by a two-step verification process. Enter your verification code below.</p>
        <hr/>
        <!-- FORM -->
        <EditForm Model="@_twoFactorRequest" FormName="login-with-2fa" OnValidSubmit="OnValidTwoFactorSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-2">
                <InputText @bind-Value="@_twoFactorRequest.Code" id="two-factor-code" class="form-control" autocomplete="off"/>
                <label for="two-factor-code" class="form-label">Authenticator code</label>
                <ValidationMessage For="@(() => _twoFactorRequest.Code)" class="text-danger"/>
            </div>
            <!-- SUBMIT -->
            <button class="btn btn-full btn-primary mb-2" type="submit">
                <i class="fa fa-key me-2"></i>Authenticate
            </button>
        </EditForm>
    </div>
}
else 
{
    <!-- LOGIN TITLE -->
    <h2>Login</h2>
    <!-- LOGIN FORM -->
    <EditForm Model="@_loginRequest" OnValidSubmit="@(async () => await OnValidLoginSubmitAsync())">
        <DataAnnotationsValidator/>
        <!-- EMAIL OR USERNAME-->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="emailOrUsername" @bind-Value="@_loginRequest.EmailOrUsername">></InputText>
            <label for="emailOrUsername">Email or Username</label>
        </div>
        <!-- PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="password" @bind-Value="@_loginRequest.Password"></InputText>
            <label for="password">Password</label>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-full btn-primary mb-2" type="submit">
            <i class="fa fa-sign-in me-2"></i>Login
        </button>
    </EditForm>

    <!-- LOGIN ALTERNATIVES -->
    <a class="w-100 text-start" href="@Consts.PageForgotPassword">Forgot Password</a>
    <a class="w-100 text-start" href="@Consts.RecoveryLogin">Recovery Login</a>

    <!-- REGISTER TITLE -->
    <hr class="my-3"/>
    <h2>Register</h2>
    <!-- REGISTER FORM -->
    <EditForm Model="@_registerRequest" OnValidSubmit="@(async () => await OnValidRegisterSubmitAsync() )">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- EMAIL -->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="email" @bind-Value="@_registerRequest.Email"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Email)"/>
            <label for="email">Email *</label>
        </div>
        <!-- USERNAME -->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="username" @bind-Value="@_registerRequest.Username"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Username)"/>
            <label for="emailOrUsername">Username *</label>
        </div>
        <!-- PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="registerPassword" @bind-Value="@_registerRequest.Password"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Password)"/>
            <label for="registerPassword">Password *</label>
        </div>
        <!-- CONFIRM PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@_registerRequest.PasswordConfirm"></InputText>
            <ValidationMessage For="@(() => _registerRequest.PasswordConfirm)"/>
            <label for="confirmPassword">Confirm Password *</label>
        </div>
        <!-- EMAIL -->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="2faEmail" @bind-Value="@_registerRequest.TwoFactorEmail"></InputText>
            <ValidationMessage For="@(() => _registerRequest.TwoFactorEmail)"/>
            <label for="2faEmail">2Fa Login Email *</label>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-full btn-primary mb-2" type="submit">
            <i class="fa fa-user-plus me-2"></i>Register
        </button>
    </EditForm>
    
    // RESEND EMAIL CONFIRM LINK
    <a class="w-100 text-start" href="@Consts.PageEmailConfirmResend">Resend Confirmation Email</a>
}

@code 
{
    readonly LoginRequest _loginRequest = new();
    readonly RegisterRequest _registerRequest = new();
    readonly TwoFactorRequest _twoFactorRequest = new();

    bool _registered = false;
    bool _pendingTwoFactor = false;

    async Task OnValidLoginSubmitAsync()
    {
        StartLoading( "Logging In..." );

        Reply<LoginReply> loginResult = await TryLogin();

        if (!loginResult)
        {
            await Auth.ClearSession();
            PushError( loginResult, "Failed to login." );
            StopLoading();
            return;
        }

        if (loginResult.Data.IsPending2Fa)
        {
            _pendingTwoFactor = true;
            _twoFactorRequest.EmailOrUsername = _loginRequest.EmailOrUsername;
            StateHasChanged();
            StopLoading();
            return;
        }

        var updateResult = await Auth.CreateNewSession( loginResult.Data.AccessToken ?? string.Empty );

        if (!updateResult)
        {
            PushError( updateResult, "Failed to save login." );
            StopLoading();
            return;
        }

        StartLoading( "Login Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidTwoFactorSubmitAsync()
    {
        StartLoading( "Verifying Two Factor..." );

        _twoFactorRequest.EmailOrUsername = _loginRequest.EmailOrUsername;

        Reply<TwoFactorReply> result = await TryTwoFactorLogin();

        if (!result)
        {
            PushError( result, "Two factor authorization failed!" );
            StopLoading();
            return;
        }

        Reply<bool> updateResult = await Auth.CreateNewSession( result.Data.AccessToken );

        if (!updateResult)
        {
            PushError( result, "Two factor authorization succeeded on the server, but failed to save locally!" );
            StopLoading();
            return;
        }

        StartLoading( "Two Factor Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidRegisterSubmitAsync()
    {
        StartLoading( "Registering..." );

        Reply<bool> reply = await TryRegister();

        if (!reply)
        {
            PushError( reply, "Failed to register account." );
            Console.WriteLine( reply.GetMessage() );
            StopLoading();
            return;
        }

        _registered = true;
        StateHasChanged();
        StopLoading();
    }

    async Task<Reply<LoginReply>> TryLogin() =>
        await Http.PostAsync<LoginReply>( Http.OrderingApi( Consts.ApiLogin ), _loginRequest );
    async Task<Reply<TwoFactorReply>> TryTwoFactorLogin() =>
        await Http.PostAsync<TwoFactorReply>( Http.OrderingApi( Consts.ApiTwoFactor ), _twoFactorRequest );
    async Task<Reply<bool>> TryRegister() =>
        await Http.PutAsync<bool>( Http.OrderingApi( Consts.ApiRegister ), _registerRequest );

    void GoToLogin() =>
        Navigate( Consts.PageLoginOrRegister, true );

    sealed class LoginRequest
    {
        [Required( ErrorMessage = "Email or Username is required." )]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." )]
        public string Password { get; set; } = string.Empty;
    }
    sealed class TwoFactorRequest
    {
        [Required( ErrorMessage = "Email or Username is required." )]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required, DataType( DataType.Text ), Display( Name = "Authenticator code" ), StringLength( 40, ErrorMessage = "The two factor code must be at least 6 and at max 40 characters long.", MinimumLength = 6 )]
        public string Code { get; set; } = string.Empty;
    }
    sealed class RegisterRequest
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )]
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." ), MinLength( 8, ErrorMessage = "Password must be at least 8 characters." )]
        public string Password { get; set; } = string.Empty;

        [Compare( "Password", ErrorMessage = "Passwords do not match." )]
        public string PasswordConfirm { get; set; } = string.Empty;

        [EmailAddress( ErrorMessage = "Invalid email address." )]
        public string? TwoFactorEmail { get; set; } = string.Empty;
    }

    sealed record LoginReply(
        string? AccessToken,
        bool IsPending2Fa );
    readonly record struct TwoFactorReply(
        string AccessToken );
}